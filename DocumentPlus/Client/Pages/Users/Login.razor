@page "/login"
@using System.Text.RegularExpressions
@using DocumentPlus.Client.Data
@inject IHttpClientFactory httpFactory
@inject CustomLocalStorage localStorage
@inject NavigationManager  navigationManager
@inject AuthenticationStateProvider stateProvider

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm>
                <MudTextField T="string" @bind-Value="LoginData" Label="Логин" Required="true" RequiredError="Вы не указали логин" />
                <MudTextField T="string" @bind-Value="Password" Label="Пароль" HelperText="Введите ваш пароль" @ref="pwField1"
                              InputType="InputType.Password"
                              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                              RequiredError="Вы не указали пароль" />
            </MudForm>
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" @onclick="Validate">Вход</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DropShadow="false" OnClick="@(()=>form.ResetAsync())" Class="mx-2">Очистить поля</MudButton>
        </MudPaper>
    </MudItem>
    
</MudGrid>


@code {
    // Поля для формы
    MudTextField<string>? pwField1;
    MudForm? form;

    string? LoginData;
    string? Password;


    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Поле 'пароль' пусто";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Длина пароля должна быть больше 8ми символов";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "У пароля отсутствую буквы вверхнего регистра";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "У пароля отсутствую буквы нижнего регистра";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "В пароле не содержится ни одна цифра";
    }


    public async Task Validate()
    {
        //var httpClient = _httpClientFactory.CreateClient("DocManagerHttpClient");

        UserLogin user = new UserLogin()
            {
                Login = "Not stated",
                Password = "Not stated"
            };

        user.Login = LoginData;
        user.Password = Password;

        var httpClient =  httpFactory.CreateClient("Aozh8");
        var response = await httpClient.PostAsJsonAsync("api/user/login", user);

        if (response.IsSuccessStatusCode)
        {
            var userInfo = response.Content.ReadFromJsonAsync<LoginResponse>().Result;
            
            await localStorage.SetDataAsync(userInfo.User);
            await localStorage.SetDataAsync("jwt-access-token", userInfo.Token);

            navigationManager.NavigateTo("/");
            (stateProvider as CustomAuthenticationStateProivder).NotifyStateChange();
        }
    }

}
