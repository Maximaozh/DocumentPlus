@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization

@page "/DocList"

@inject IHttpClientFactory httpFactory
@inject CustomLocalStorage localStorage
@inject NavigationManager NavManager
@inject IJSRuntime JS

<PageTitle>Главная страница</PageTitle>

@attribute [Authorize]

@if (isLoading)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}

else if (documents_group != null)
{
    <MudStack Row>
        <MudPaper Style="padding: 15px;" Width="100%" >
            @* <MudStack Row>
                <MudText Class="pa-2">Сортировка</MudText>
                <MudButtonGroup Color="Color.Primary" Size="Size.Small" Variant="Variant.Outlined">
                    <MudButton>Название</MudButton>
                    <MudButton>Дата создания</MudButton>
                    <MudButton>Дата окончания</MudButton>
                </MudButtonGroup>
            </MudStack> *@

            <MudTextField Class="mb-5" T="string" ValueChanged="@(s=>OnSearch(s))"
                          HelperText="@searchString" Label="Поиск" Variant="Variant.Outlined"
                          Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" />
    
            <MudStack Row Style="flex-wrap:wrap; justify-content:center;">
          
                @foreach (var item in documents_group)
                {
                    <MudBreakpointProvider>
                        <MudHidden Breakpoint="Breakpoint.SmAndUp" Invert="true">
                            <MudCard Class="pa-5">
                                <MudCardContent>
                                    <MudText>@item.Name</MudText>
                                        <MudText Typo="Typo.body2">Автор: @item.AuthorName @item.AuthorSurname</MudText>

                                    @if (item.GroupName != null)
                                    {
                                        <MudText Typo="Typo.body2">Группа: @item.GroupName</MudText>
                                    }

                                    @if (@item.ExpireDate.Subtract(DateTime.Now).TotalDays > 0)
                                    {
                                        @if (@item.ExpireDate.Subtract(DateTime.Now).TotalDays < 1)
                                        {
                                            <MudText Typo="Typo.body2">Срок действия: @item.ExpireDate.Subtract(DateTime.Now).Hours часов</MudText>
                                        }
                                        else
                                        {
                                            <MudText Typo="Typo.body2">Срок действия: @item.ExpireDate.Subtract(DateTime.Now).Days дней</MudText>
                                        }
                                    }
                                    else
                                    {
                                        <MudText Typo="Typo.body2">Срок действия истек</MudText>
                                    }
                                </MudCardContent>
                                <MudCardActions>
                                    @if (item.AccessLevel == 0)
                                    {
                                        <MudButton Variant="Variant.Text" Color="Color.Primary" @onclick="() => RedirectToViewDoc(item.Id)">Подробнее</MudButton>
                                        <MudButton Variant="Variant.Text" Color="Color.Primary" @onclick="() => RedirectToEditDoc(item.Id)">Редактировать</MudButton>
                                        <MudButton Variant="Variant.Text" Color="Color.Error" @onclick="() => DeleteDocument(item.Id)">Удалить</MudButton>
                                    }
                                    else if (item.AccessLevel == 1)
                                    {
                                        @if (@item.ExpireDate.Subtract(DateTime.Now).TotalDays < 0)
                                        {
                                            <MudButton Variant="Variant.Text" Disabled="true" Color="Color.Primary" @onclick="() => RedirectToViewDoc(item.Id)">Подробнее</MudButton>
                                            <MudButton Variant="Variant.Text" Disabled="true" Color="Color.Primary" @onclick="() => RedirectToEditDoc(item.Id)">Редактировать</MudButton>
                                        }
                                        else
                                        {
                                            <MudButton Variant="Variant.Text" Color="Color.Primary" @onclick="() => RedirectToViewDoc(item.Id)">Подробнее</MudButton>
                                            <MudButton Variant="Variant.Text" Color="Color.Primary" @onclick="() => RedirectToEditDoc(item.Id)">Редактировать</MudButton>
                                        }
                                    }
                                    else
                                    {
                                        @if (@item.ExpireDate.Subtract(DateTime.Now).TotalDays < 0)
                                        {
                                            <MudButton Variant="Variant.Text" Disabled="true" Color="Color.Primary" @onclick="() => RedirectToViewDocGroup(item.Id)">Подробнее</MudButton>
                                        }
                                        else
                                        {
                                            <MudButton Variant="Variant.Text" Color="Color.Primary" @onclick="() => RedirectToViewDoc(item.Id)">Подробнее</MudButton>
                                        }
                                    }
                                </MudCardActions>
                            </MudCard>
                        </MudHidden>
                    </MudBreakpointProvider>
                }
           
            </MudStack>
        </MudPaper>
        <MudPaper Class="pa-2" Width="35%" Style="padding-bottom: 8px;">
            @if (folders != null)
            {
                <DocTree FolderTree="folders" />
            }

        </MudPaper>
    </MudStack>
}
else
{
    <p>Документы не найдены.</p>
}
@if (isDeleting)
{
    <MudProgressLinear />
}

@code
{
    int activeIndex = 2;
    string? searchString;
    private bool isDeleting = false;
    bool isLoading = true;

    private List<DocInfoGet>? documents = new List<DocInfoGet>();
    private List<DocInfoGet>? documents_group;
    private List<Folder>? folders = new List<Folder>();
    public string role;

    protected override async Task OnInitializedAsync()
    {
        role = await localStorage.GetValueAsync<string>("User:Id");
        var httpClient = httpFactory.CreateClient("Aozh8");
        folders = await httpClient.GetFromJsonAsync<List<Folder>>($"api/documents/tree/group?filter={searchString}");
        documents_group = await httpClient.GetFromJsonAsync<List<DocInfoGet>>($"api/documents/group?filter={searchString}");
        isLoading = false;
    }

    public async Task OnSearch(string text)
    {
        searchString = text;
        var httpClient = httpFactory.CreateClient("Aozh8");
        folders = await httpClient.GetFromJsonAsync<List<Folder>>($"api/documents/tree/group?filter={searchString}");
        documents_group = await httpClient.GetFromJsonAsync<List<DocInfoGet>>($"api/documents/group?filter={searchString}");
    }

    public void RedirectToViewDoc(int id)
    {
        NavManager.NavigateTo($"/DocDetails/{id}");
    }

    public void RedirectToViewDocGroup(int id)
    {
        NavManager.NavigateTo($"/DocGroupDetails/{id}");
    }

    public void RedirectToEditDoc(int id)
    {
        NavManager.NavigateTo($"/DocEdit/{id}");
    }
    public void RedirectToEditDocGroup(int id)
    {
        NavManager.NavigateTo($"/DocGroupEdit/{id}");
    }

    private async Task DeleteDocument(int id)
    {
        var confirm = await JS.InvokeAsync<bool>("confirm", "Вы хотите удалить этот документ?");
        if (confirm)
        {
            isDeleting = true;
            var httpClient = httpFactory.CreateClient("Aozh8");
            await httpClient.DeleteAsync($"api/document/{id}");
            StateHasChanged();
            documents_group = await httpClient.GetFromJsonAsync<List<DocInfoGet>>($"api/documents/group?filter={searchString}");
            folders = await httpClient.GetFromJsonAsync<List<Folder>>($"api/documents/tree/group?filter={searchString}");
            isDeleting = false;
        }
    }
}
